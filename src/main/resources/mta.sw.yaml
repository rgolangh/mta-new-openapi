specVersion: "0.8"
id: MTAAnalysis
name: MTA Analysis
annotations:
  - "workflow-type/infrastructure"
version: "1.0"
timeouts:
  workflowExecTimeout:
    duration: PT1H
start: GetApplications
dataInputSchema:
  schema: specs/mta-input.json
  failOnValidationErrors: false
functions:
  - name: debug
    type: custom
    operation: sysout
  - name: filterApplication
    type: expression
    operation: "{application: .applications|map(select(.repository.url == .repositoryURL))[0]}"
  - name: getApplications
    operation: specs/mta.json#getApplications
  - name: createApplication
    operation: specs/mta.json#createApplication
  - name: createTaskgroup
    operation: specs/mta.json#createTaskgroup
  - name: submitTaskgroup
    operation: specs/mta.json#submitTaskgroup
  - name: getTaskgroup
    operation: specs/mta.json#getTaskgroup

states:
  - name: GetApplications
    type: operation
    actionMode: sequential
    actions:
      - name: getApp
        functionRef: getApplications
        actionDataFilter:
          toStateData: ".applications"
    stateDataFilter:
      output: "{repositoryURL: .repositoryURL, application: .repositoryURL as $r| if .applications == null then null else .applications|map(select(.repository.url == $r))[0] end}"
    transition: AppExist
  - name: AppExist
    type: switch
    dataConditions:
      - condition: ".application != null"
        transition:
          nextState: CreateTaskgroup
    defaultCondition:
      transition: CreateApplication

  - name: CreateApplication
    type: operation
    actions:
      - name: createApplication
        actionDataFilter:
          toStateData: ".application"
        functionRef:
          refName: createApplication
          arguments:
            name: ".repositoryURL"
            repository:
              url: ".repositoryURL"
              kind: git
    stateDataFilter:
      output: ". += { application: .application }"
    transition: CreateTaskgroup
  - name: CreateTaskgroup
    type: operation
    actionMode: sequential
    actions:
      - name: createTaskgroup
        actionDataFilter:
          toStateData: ".taskgroup"
        functionRef:
          refName: createTaskgroup
          arguments:
            name: taskgroup.windup
            addon: windup
            tasks:
              - name: parodos.windup
                application:
                  id: ".application.id"
            data:
              output: "/windup/report"
              mode:
                binary: false
                diva: false
                withDeps: false
              rules:
                labels:
                  - "konveyor.io/target=cloud-readiness"
                rulesets:
                  - id: 2
                    name: Containerization
                path: ''
              scope:
                withKnown: false
              sources: [ ]
              targets:
                - cloud-readiness
    stateDataFilter:
      output: ". += { taskgroup: .taskgroup }"
    transition: SubmitAnalysis
  - name: SubmitAnalysis
    type: operation
    actionMode: sequential
    actions:
      - name: submitTaskgroup
        functionRef:
          refName: submitTaskgroup
          arguments:
            id: ".taskgroup.id"
            data: ".taskgroup.data"
            tasks: ".taskgroup.tasks"
            addon: windup
            createUser: admin.noauth

    transition: GetAnalysis
  - name: GetAnalysis
    type: operation
    actionMode: sequential
    actions:
      - name: getTaskgroup
        functionRef:
          refName: getTaskgroup
          arguments:
            id: ".taskgroup.id"
        actionDataFilter:
          toStateData: ".taskgroup"
    stateDataFilter:
      output: ". += { taskgroup: .taskgroup }"
    transition: poll
  - actions:
      - functionRef:
          refName: getTaskgroup
          arguments:
            id: ".taskgroup.id"
        actionDataFilter:
          toStateData: ".taskgroup"
        sleep:
          before: PT2S
    name: poll
    type: operation
    stateDataFilter:
      output: ". += { taskgroup: .taskgroup }"
    transition: checkReportDone
  - name: checkReportDone
    type: switch
    dataConditions:
      - condition: (.taskgroup.state == "Ready" and .taskgroup.tasks[0].state == "Succeeded")
        transition: report
      - condition: (.taskgroup.state == "Ready" and .taskgroup.tasks[0].state == "Failed")
        transition: failed
    defaultCondition:
      transition: poll
  - name: report
    type: operation
    stateDataFilter:
      output: '{result: .taskgroup.tasks[0]| .mtaURL + "/hub/applications" + "/" + (.application.id|tostring) + "/bucket/" + .data.output}'
    end: true
  - name: failed
    type: operation
    stateDataFilter:
      output: '{result: .taskgroup.tasks[0]| .mtaURL + "/hub/applications" + "/" + (.application.id|tostring) + "/bucket/" + .data.output}'
    end: true


